{"version":3,"sources":["Components/Form.js","Components/Toggle.js","Components/Mode.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","type","placeholder","name","value","EventTarget","Toggle","checked","onChange","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","toggle","enable","App","Mode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAceA,G,YAZF,WACT,OACI,yBAAKC,UAAU,QACf,0BAAMA,UAAU,WACZ,2BAAOC,KAAK,OAAOC,YAAY,OAAOC,KAAK,GAAGC,MAAOC,YAAYD,QACjE,2BAAOH,KAAK,WAAWC,YAAY,WAAWC,KAAK,GAAGC,MAAOC,YAAYD,QACzE,4BAAQJ,UAAU,MAAMC,KAAK,UAA7B,c,OCMGK,EAbA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACb,0BAAMR,UAAU,kBACd,uCACEA,UAAU,UACVC,KAAK,WACLM,QAASA,EACTC,SAAUA,EACVC,GAAG,WALL,YAMU,SACV,2BAAOC,QAAQ,c,OCUJC,EAhBQ,WACrB,IAAMC,EAAWC,aAAY,GAE7B,OACE,6BACE,4BAAQZ,KAAK,SAASD,UAAU,OAAOc,QAASF,EAASG,SAAzD,SAGA,kBAAC,EAAD,CAAQR,QAASK,EAASR,MAAOI,SAAUI,EAASI,SACpD,4BAAQf,KAAK,SAASD,UAAU,OAAOc,QAASF,EAASK,QAAzD,UCESC,MAVf,WACE,OACE,yBAAKlB,UAAU,OACX,4DACA,kBAACmB,EAAD,MACA,kBAAC,EAAD,QCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0c4713c5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = () => {\r\n    return (\r\n        <div className=\"form\">\r\n        <form className=\"details\">\r\n            <input type=\"text\" placeholder=\"Name\" name=\"\" value={EventTarget.value}/>\r\n            <input type=\"password\" placeholder=\"Password\" name=\"\" value={EventTarget.value}/>\r\n            <button className=\"btn\" type=\"submit\">submit</button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\nconst Toggle = ({ checked, onChange }) => (\r\n  <span className=\"toggle-control\">\r\n    <input\r\n      className=\"dmcheck\"\r\n      type=\"checkbox\"\r\n      checked={checked}\r\n      onChange={onChange}\r\n      id=\"dmcheck\"\r\n    className=\"btn3\" />\r\n    <label htmlFor=\"dmcheck\" />\r\n  </span>\r\n);\r\n\r\nexport default Toggle;","import React from 'react';\r\nimport Toggle from \"./Toggle\";\r\nimport useDarkMode from 'use-dark-mode';\r\n\r\nconst DarkModeToggle = () => {\r\n  const darkMode = useDarkMode(false);\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" className=\"btn1\" onClick={darkMode.disable}>\r\n        light\r\n      </button>\r\n      <Toggle checked={darkMode.value} onChange={darkMode.toggle}/>\r\n      <button type=\"button\" className=\"btn2\" onClick={darkMode.enable}>\r\n        dark\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DarkModeToggle;","import React from 'react';\nimport './App.css';\nimport Form from \"./Components/Form\"\nimport Mode from \"./Components/Mode\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h3>click to switch to the modes</h3>\n        <Mode/>\n        <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}